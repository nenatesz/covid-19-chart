{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Desktop\\\\covid-19_chart\\\\views\\\\src\\\\components\\\\chartsComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { Pie, Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChartsComponent1 = ({\n  country\n}) => {\n  _s();\n\n  // const [selectedcountry, setSelectedCountry] = useState(country);\n  const [statsData, setStatsData] = useState({\n    country: \"\",\n    deaths: \"\",\n    tests: \"\",\n    cases: \"\",\n    lastUpdate: \"\"\n  });\n  const [getStats, setGetStats] = useState(false);\n  useEffect(() => {\n    fetchChartData(country);\n  }, [country]); // let statsData = {\n  //     country: undefined,\n  //     deaths: undefined,\n  //     tests: undefined,\n  //     cases: undefined,\n  //     lastUpdate: undefined\n  // };\n\n  const duration = ['Last One Week', 'Last Two Weeks', 'Last Three Weeks', 'Last One Month'];\n  const CHART_COLORS = {\n    red: 'rgb(255, 99, 132)',\n    orange: 'rgb(255, 159, 64)',\n    yellow: 'rgb(255, 205, 86)',\n    green: 'rgb(75, 192, 192)',\n    blue: 'rgb(54, 162, 235)',\n    purple: 'rgb(153, 102, 255)',\n    grey: 'rgb(201, 203, 207)'\n  };\n  const state = {\n    labels: ['Recovered', 'Critical', 'Active', 'New', 'Total'],\n    datasets: [{\n      backgroundColor: Object.values(CHART_COLORS) //   data: [\n      //         statsData.cases.new,\n      //         statsData.cases.critical,\n      //         statsData.cases.recoverd,\n      //         statsData.cases.active,\n      //         statsData.cases.total,\n      //   ]\n\n    }]\n  };\n\n  const fetchChartData = country => {\n    if (country !== 'All') {\n      axios.get(`/api/statistics/${country}`).then(res => {\n        if (res) {\n          const data = res.data;\n          console.log(data);\n          setStatsData({\n            country: data.response[0].country,\n            deaths: data.response[0].deaths,\n            tests: data.response[0].tests,\n            cases: data.response[0].cases,\n            lastUpdate: new Date(dataresponse[0].time).toUTCString()\n          });\n          console.log('stats' + statsData.cases.new);\n          setGetStats(true);\n        } //     state = {\n        //     labels: ['Recovered', 'Critical', 'Active', 'New', 'Total'],\n        //     datasets: [\n        //       {\n        //         backgroundColor: Object.values(CHART_COLORS),\n        //         data: [\n        //               statsData.cases.new,\n        //               statsData.cases.critical,\n        //               statsData.cases.recoverd,\n        //               statsData.cases.active,\n        //               statsData.cases.total,\n        //         ]\n        //       }\n        //     ]\n        //   };\n\n      });\n    } // if (this.spieChart != null){\n    //     this.spieChart.destroy();\n    //     this.spieChart = undefined\n    // }\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: getStats ? /*#__PURE__*/_jsxDEV(Pie, {\n      data: state,\n      options: {\n        title: {\n          display: true,\n          text: 'Average Rainfall per month',\n          fontSize: 20\n        },\n        legend: {\n          display: true,\n          position: 'right'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }, this) : 'Stats Data Not Available'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChartsComponent1, \"H3gO8wEhT7qCJ72t9qYJgHLUWV8=\");\n\n_c = ChartsComponent1;\nexport default ChartsComponent1;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartsComponent1\");","map":{"version":3,"sources":["C:/Users/user/OneDrive/Desktop/covid-19_chart/views/src/components/chartsComponent.jsx"],"names":["axios","React","useEffect","useState","Pie","Doughnut","ChartsComponent1","country","statsData","setStatsData","deaths","tests","cases","lastUpdate","getStats","setGetStats","fetchChartData","duration","CHART_COLORS","red","orange","yellow","green","blue","purple","grey","state","labels","datasets","backgroundColor","Object","values","get","then","res","data","console","log","response","Date","dataresponse","time","toUTCString","new","title","display","text","fontSize","legend","position"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {Pie, Doughnut} from 'react-chartjs-2';\r\n\r\nconst ChartsComponent1 = ({country}) => {\r\n\r\n    // const [selectedcountry, setSelectedCountry] = useState(country);\r\n    const [statsData, setStatsData] = useState({country: \"\", deaths: \"\", tests: \"\", cases: \"\", lastUpdate: \"\"})\r\n    const [getStats, setGetStats] = useState(false)\r\n\r\n    useEffect(() => {\r\n        fetchChartData(country)\r\n    }, [country])\r\n    \r\n    // let statsData = {\r\n    //     country: undefined,\r\n    //     deaths: undefined,\r\n    //     tests: undefined,\r\n    //     cases: undefined,\r\n    //     lastUpdate: undefined\r\n    // };\r\n\r\n    const duration = [\r\n        'Last One Week',\r\n        'Last Two Weeks',\r\n        'Last Three Weeks',\r\n        'Last One Month',\r\n    ];\r\n\r\n    const CHART_COLORS = {\r\n        red: 'rgb(255, 99, 132)',\r\n        orange: 'rgb(255, 159, 64)',\r\n        yellow: 'rgb(255, 205, 86)',\r\n        green: 'rgb(75, 192, 192)',\r\n        blue: 'rgb(54, 162, 235)',\r\n        purple: 'rgb(153, 102, 255)',\r\n        grey: 'rgb(201, 203, 207)'\r\n      };\r\n\r\n    const state = {\r\n      labels: ['Recovered', 'Critical', 'Active', 'New', 'Total'],\r\n      datasets: [\r\n        {\r\n          backgroundColor: Object.values(CHART_COLORS),\r\n        //   data: [\r\n        //         statsData.cases.new,\r\n        //         statsData.cases.critical,\r\n        //         statsData.cases.recoverd,\r\n        //         statsData.cases.active,\r\n        //         statsData.cases.total,\r\n        //   ]\r\n        }\r\n      ]\r\n    };\r\n\r\n    const fetchChartData = (country) => {\r\n        if (country !== 'All') {\r\n            \r\n            axios.get(`/api/statistics/${country}`).then(res=>{\r\n                if(res){\r\n                    const data = res.data\r\n                    console.log(data)\r\n    \r\n                    setStatsData({\r\n                        country: data.response[0].country,\r\n                        deaths: data.response[0].deaths,\r\n                        tests: data.response[0].tests,\r\n                        cases: data.response[0].cases,\r\n                        lastUpdate: (new Date(dataresponse[0].time)).toUTCString()\r\n                    });\r\n                    console.log('stats' + statsData.cases.new)\r\n    \r\n                    setGetStats(true)\r\n    \r\n                }\r\n    \r\n                //     state = {\r\n                //     labels: ['Recovered', 'Critical', 'Active', 'New', 'Total'],\r\n                //     datasets: [\r\n                //       {\r\n                //         backgroundColor: Object.values(CHART_COLORS),\r\n                //         data: [\r\n                //               statsData.cases.new,\r\n                //               statsData.cases.critical,\r\n                //               statsData.cases.recoverd,\r\n                //               statsData.cases.active,\r\n                //               statsData.cases.total,\r\n                //         ]\r\n                //       }\r\n                //     ]\r\n                //   };\r\n    \r\n            })\r\n        \r\n        }\r\n\r\n        // if (this.spieChart != null){\r\n        //     this.spieChart.destroy();\r\n        //     this.spieChart = undefined\r\n        // }\r\n\r\n    }\r\n \r\n\r\n    return (\r\n        <div>\r\n            {\r\n                getStats ? (<Pie\r\n                    data={state}\r\n                    options={{\r\n                      title:{\r\n                        display:true,\r\n                        text:'Average Rainfall per month',\r\n                        fontSize:20\r\n                      },\r\n                      legend:{\r\n                        display:true,\r\n                        position:'right'\r\n                      }\r\n                    }}\r\n                  />) : 'Stats Data Not Available'\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChartsComponent1\r\n"]},"metadata":{},"sourceType":"module"}