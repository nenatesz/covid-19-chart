{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Desktop\\\\covid-19_chart\\\\views\\\\src\\\\components\\\\chartsComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { Pie, Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChartsComponent1 = ({\n  country\n}) => {\n  _s();\n\n  const [selectedcountry, setSelectedCountry] = useState(country);\n  const [getStats, setGetStats] = useState(false); // useEffect(() => {\n  //     fetchChartData(selectedcountry)\n  // }, [selectedcountry])\n\n  let state = {};\n  let statsData = {\n    country: undefined,\n    deaths: undefined,\n    tests: undefined,\n    cases: undefined,\n    lastUpdate: undefined\n  };\n  const duration = ['Last One Week', 'Last Two Weeks', 'Last Three Weeks', 'Last One Month'];\n  const CHART_COLORS = {\n    red: 'rgb(255, 99, 132)',\n    orange: 'rgb(255, 159, 64)',\n    yellow: 'rgb(255, 205, 86)',\n    green: 'rgb(75, 192, 192)',\n    blue: 'rgb(54, 162, 235)',\n    purple: 'rgb(153, 102, 255)',\n    grey: 'rgb(201, 203, 207)'\n  }; // const state = {\n  //   labels: ['Recovered', 'Critical', 'Active', 'New', 'Total'],\n  //   datasets: [\n  //     {\n  //       backgroundColor: Object.values(CHART_COLORS),\n  //       data: [\n  //             statsData.cases.new,\n  //             statsData.cases.critical,\n  //             statsData.cases.recoverd,\n  //             statsData.cases.active,\n  //             statsData.cases.total,\n  //       ]\n  //     }\n  //   ]\n  // };\n\n  const fetchChartData = country => {\n    if (country === null) {\n      return;\n    } // if (this.spieChart != null){\n    //     this.spieChart.destroy();\n    //     this.spieChart = undefined\n    // }\n\n\n    axios.get(`/api/statistics/${country}`).then(res => {\n      if (res) {\n        statsData = {\n          country: res.data.response[0].country,\n          deaths: res.data.response[0].deaths,\n          tests: res.data.response[0].tests,\n          cases: res.data.response[0].cases,\n          lastUpdate: new Date(res.data.response[0].time).toUTCString()\n        };\n        setGetStats(true);\n      }\n\n      state = {\n        labels: ['Recovered', 'Critical', 'Active', 'New', 'Total'],\n        datasets: [{\n          backgroundColor: Object.values(CHART_COLORS),\n          data: [statsData.cases.new, statsData.cases.critical, statsData.cases.recoverd, statsData.cases.active, statsData.cases.total]\n        }]\n      };\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: getStats ? /*#__PURE__*/_jsxDEV(Pie, {\n      data: state,\n      options: {\n        title: {\n          display: true,\n          text: 'Average Rainfall per month',\n          fontSize: 20\n        },\n        legend: {\n          display: true,\n          position: 'right'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 29\n    }, this) : 'Stats Data Not Available'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChartsComponent1, \"rMbX0ssgkkkjsVhZLzywglbp5yk=\");\n\n_c = ChartsComponent1;\nexport default ChartsComponent1;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartsComponent1\");","map":{"version":3,"sources":["C:/Users/user/OneDrive/Desktop/covid-19_chart/views/src/components/chartsComponent.jsx"],"names":["axios","React","useEffect","useState","Pie","Doughnut","ChartsComponent1","country","selectedcountry","setSelectedCountry","getStats","setGetStats","state","statsData","undefined","deaths","tests","cases","lastUpdate","duration","CHART_COLORS","red","orange","yellow","green","blue","purple","grey","fetchChartData","get","then","res","data","response","Date","time","toUTCString","labels","datasets","backgroundColor","Object","values","new","critical","recoverd","active","total","title","display","text","fontSize","legend","position"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {Pie, Doughnut} from 'react-chartjs-2';\r\n\r\nconst ChartsComponent1 = ({country}) => {\r\n\r\n    const [selectedcountry, setSelectedCountry] = useState(country);\r\n    const [getStats, setGetStats] = useState(false)\r\n\r\n    // useEffect(() => {\r\n    //     fetchChartData(selectedcountry)\r\n    // }, [selectedcountry])\r\n\r\n    let state = {}\r\n\r\n    \r\n    let statsData = {\r\n        country: undefined,\r\n        deaths: undefined,\r\n        tests: undefined,\r\n        cases: undefined,\r\n        lastUpdate: undefined\r\n    };\r\n\r\n    const duration = [\r\n        'Last One Week',\r\n        'Last Two Weeks',\r\n        'Last Three Weeks',\r\n        'Last One Month',\r\n    ];\r\n\r\n    const CHART_COLORS = {\r\n        red: 'rgb(255, 99, 132)',\r\n        orange: 'rgb(255, 159, 64)',\r\n        yellow: 'rgb(255, 205, 86)',\r\n        green: 'rgb(75, 192, 192)',\r\n        blue: 'rgb(54, 162, 235)',\r\n        purple: 'rgb(153, 102, 255)',\r\n        grey: 'rgb(201, 203, 207)'\r\n      };\r\n\r\n    // const state = {\r\n    //   labels: ['Recovered', 'Critical', 'Active', 'New', 'Total'],\r\n    //   datasets: [\r\n    //     {\r\n    //       backgroundColor: Object.values(CHART_COLORS),\r\n    //       data: [\r\n    //             statsData.cases.new,\r\n    //             statsData.cases.critical,\r\n    //             statsData.cases.recoverd,\r\n    //             statsData.cases.active,\r\n    //             statsData.cases.total,\r\n    //       ]\r\n    //     }\r\n    //   ]\r\n    // };\r\n\r\n    const fetchChartData = (country) => {\r\n        if (country === null) {\r\n            return\r\n        }\r\n\r\n        // if (this.spieChart != null){\r\n        //     this.spieChart.destroy();\r\n        //     this.spieChart = undefined\r\n        // }\r\n\r\n        axios.get(`/api/statistics/${country}`).then(res=>{\r\n            if(res){\r\n\r\n                statsData = {\r\n                    country: res.data.response[0].country,\r\n                    deaths: res.data.response[0].deaths,\r\n                    tests: res.data.response[0].tests,\r\n                    cases: res.data.response[0].cases,\r\n                    lastUpdate: (new Date(res.data.response[0].time)).toUTCString()\r\n                };\r\n\r\n                setGetStats(true)\r\n\r\n            }\r\n\r\n                state = {\r\n                labels: ['Recovered', 'Critical', 'Active', 'New', 'Total'],\r\n                datasets: [\r\n                  {\r\n                    backgroundColor: Object.values(CHART_COLORS),\r\n                    data: [\r\n                          statsData.cases.new,\r\n                          statsData.cases.critical,\r\n                          statsData.cases.recoverd,\r\n                          statsData.cases.active,\r\n                          statsData.cases.total,\r\n                    ]\r\n                  }\r\n                ]\r\n              };\r\n\r\n        })\r\n    }\r\n \r\n\r\n    return (\r\n        <div>\r\n            {\r\n                getStats ? (<Pie\r\n                    data={state}\r\n                    options={{\r\n                      title:{\r\n                        display:true,\r\n                        text:'Average Rainfall per month',\r\n                        fontSize:20\r\n                      },\r\n                      legend:{\r\n                        display:true,\r\n                        position:'right'\r\n                      }\r\n                    }}\r\n                  />) : 'Stats Data Not Available'\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChartsComponent1\r\n"]},"metadata":{},"sourceType":"module"}