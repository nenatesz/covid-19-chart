{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Desktop\\\\covid-19_chart\\\\views\\\\src\\\\components\\\\chartsComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { Pie, Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChartsComponent1 = ({\n  country\n}) => {\n  _s();\n\n  const [selectedcountry, setSelectedCountry] = useState(country);\n  const [getStats, setGetStats] = useState(false);\n  useEffect(() => {\n    fetchChartData(selectedcountry);\n  }, [selectedcountry]);\n  let statsData = {\n    country: undefined,\n    deaths: undefined,\n    tests: undefined,\n    cases: undefined,\n    lastUpdate: undefined\n  };\n  const duration = ['Last One Week', 'Last Two Weeks', 'Last Three Weeks', 'Last One Month'];\n  const CHART_COLORS = {\n    red: 'rgb(255, 99, 132)',\n    orange: 'rgb(255, 159, 64)',\n    yellow: 'rgb(255, 205, 86)',\n    green: 'rgb(75, 192, 192)',\n    blue: 'rgb(54, 162, 235)',\n    purple: 'rgb(153, 102, 255)',\n    grey: 'rgb(201, 203, 207)'\n  };\n  const state = {\n    labels: ['Recovered', 'Critical', 'Active', 'New', 'Total'],\n    datasets: [{\n      backgroundColor: Object.values(CHART_COLORS),\n      data: [statsData.cases.new, statsData.cases.critical, statsData.cases.recoverd, statsData.cases.active, statsData.cases.total]\n    }]\n  };\n\n  const fetchChartData = country => {\n    if (country === null) {\n      return;\n    } // if (this.spieChart != null){\n    //     this.spieChart.destroy();\n    //     this.spieChart = undefined\n    // }\n\n\n    axios.get(`/api/statistics/${country}`).then(res => {\n      if (res) {\n        statsData = {\n          country: res.data.response[0].country,\n          deaths: res.data.response[0].deaths,\n          tests: res.data.response[0].tests,\n          cases: res.data.response[0].cases,\n          lastUpdate: new Date(res.data.response[0].time).toUTCString()\n        };\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Pie, {\n      data: state,\n      options: {\n        title: {\n          display: true,\n          text: 'Average Rainfall per month',\n          fontSize: 20\n        },\n        legend: {\n          display: true,\n          position: 'right'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChartsComponent1, \"RgmA7UB/HcuLep2sXC3PsZ5+rNQ=\");\n\n_c = ChartsComponent1;\nexport default ChartsComponent1;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartsComponent1\");","map":{"version":3,"sources":["C:/Users/user/OneDrive/Desktop/covid-19_chart/views/src/components/chartsComponent.jsx"],"names":["axios","React","useEffect","useState","Pie","Doughnut","ChartsComponent1","country","selectedcountry","setSelectedCountry","getStats","setGetStats","fetchChartData","statsData","undefined","deaths","tests","cases","lastUpdate","duration","CHART_COLORS","red","orange","yellow","green","blue","purple","grey","state","labels","datasets","backgroundColor","Object","values","data","new","critical","recoverd","active","total","get","then","res","response","Date","time","toUTCString","title","display","text","fontSize","legend","position"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {Pie, Doughnut} from 'react-chartjs-2';\r\n\r\nconst ChartsComponent1 = ({country}) => {\r\n\r\n    const [selectedcountry, setSelectedCountry] = useState(country);\r\n    const [getStats, setGetStats] = useState(false)\r\n\r\n    useEffect(() => {\r\n        fetchChartData(selectedcountry)\r\n    }, [selectedcountry])\r\n\r\n    \r\n    let statsData = {\r\n        country: undefined,\r\n        deaths: undefined,\r\n        tests: undefined,\r\n        cases: undefined,\r\n        lastUpdate: undefined\r\n    };\r\n\r\n    const duration = [\r\n        'Last One Week',\r\n        'Last Two Weeks',\r\n        'Last Three Weeks',\r\n        'Last One Month',\r\n    ];\r\n\r\n    const CHART_COLORS = {\r\n        red: 'rgb(255, 99, 132)',\r\n        orange: 'rgb(255, 159, 64)',\r\n        yellow: 'rgb(255, 205, 86)',\r\n        green: 'rgb(75, 192, 192)',\r\n        blue: 'rgb(54, 162, 235)',\r\n        purple: 'rgb(153, 102, 255)',\r\n        grey: 'rgb(201, 203, 207)'\r\n      };\r\n\r\n    const state = {\r\n      labels: ['Recovered', 'Critical', 'Active', 'New', 'Total'],\r\n      datasets: [\r\n        {\r\n          backgroundColor: Object.values(CHART_COLORS),\r\n          data: [\r\n                statsData.cases.new,\r\n                statsData.cases.critical,\r\n                statsData.cases.recoverd,\r\n                statsData.cases.active,\r\n                statsData.cases.total,\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n\r\n    const fetchChartData = (country) => {\r\n        if (country === null) {\r\n            return\r\n        }\r\n\r\n        // if (this.spieChart != null){\r\n        //     this.spieChart.destroy();\r\n        //     this.spieChart = undefined\r\n        // }\r\n\r\n        axios.get(`/api/statistics/${country}`).then(res=>{\r\n            if(res){\r\n\r\n                statsData = {\r\n                    country: res.data.response[0].country,\r\n                    deaths: res.data.response[0].deaths,\r\n                    tests: res.data.response[0].tests,\r\n                    cases: res.data.response[0].cases,\r\n                    lastUpdate: (new Date(res.data.response[0].time)).toUTCString()\r\n                };\r\n\r\n            }\r\n        })\r\n    }\r\n \r\n\r\n    return (\r\n        <div>\r\n            <Pie\r\n          data={state}\r\n          options={{\r\n            title:{\r\n              display:true,\r\n              text:'Average Rainfall per month',\r\n              fontSize:20\r\n            },\r\n            legend:{\r\n              display:true,\r\n              position:'right'\r\n            }\r\n          }}\r\n        />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChartsComponent1\r\n"]},"metadata":{},"sourceType":"module"}